---
description: Quark repository structure, placement, and file-type routing rules
alwaysApply: true
---
ALWAYS apply every rule across all Cursor rule (`.cursor/rules/*.mdc`) and Quark rule (`.quark/rules/*.mdc`) files to the **current codebase and all future changes**; if any existing file violates a rule, refactor it or document an exception before proceeding.

## ðŸ§  QUARK REPOSITROY STRUCTURE
ALWAYS respect directory schema:
  â€¢ `brain/`  â€“ neural core + ML sub-systems (`brain/ml/`)
  â€¢ `tests/` â€“ test suites & benchmarks
  â€¢ `tools_utilities/` â€“ helper scripts
  â€¢ `management/` â€“ configs & project management (`management/rules/`)
  â€¢ `state/` â€“ runtime agent state
  â€¢ `docs/` â€“ all documentation
  â€¢ `repo_indexes/` â€“ generated manifests
ALWAYS follow file-type routing:
  â€¢ Scripts â†’ `tools_utilities/scripts/`
  â€¢ Configs â†’ `management/configurations/project/`
  â€¢ Notebooks â†’ `docs/notebooks/`
  â€¢ Documentation â†’ `docs/`
  â€¢ Results â†’ `tests/results_outputs/`
  â€¢ Models â†’ `data/models/`
  â€¢ Knowledge â†’ `data/knowledge`
  â€¢ Datasets â†’ `data/datasets`
  â€¢ Experiments â†’ `tests/results_outputs/experiments/`
ALWAYS obey TOP-LEVEL PLACEMENT GUARD:
  â€¢ Never create files at repo root unless core entry-points (`README.md`, `pyproject.toml`, `QUARK_STATE_SYSTEM.py`).
ALWAYS include tests with new code; maintain directory structure; preserve backups and archive for historical data.