# tools_utilities/visualizations/plot_motor_skills.py
"""
Purpose: Reads the motor skills simulation log and generates a plot
         visualizing the humanoid's movement and stability over time.
Inputs: A CSV log file generated by simulation_client.py
Outputs: An HTML file containing an interactive plot.
Dependencies: pandas, plotly
"""

import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from pathlib import Path
import argparse

def plot_motor_skills(log_path: Path, output_path: Path):
    """
    Generates an interactive HTML plot from the motor skills log.
    """
    if not log_path.exists():
        print(f"❌ Error: Log file not found at {log_path}")
        return

    try:
        df = pd.read_csv(log_path)
    except Exception as e:
        print(f"❌ Error reading log file: {e}")
        return

    if df.empty:
        print("Log file is empty. Nothing to plot.")
        return

    print(f"✅ Log file loaded successfully. Plotting {len(df)} time steps...")

    # Create a figure
    fig = go.Figure()

    # Plot the torso height (qpos_2 is typically the z-axis of the root joint)
    fig.add_trace(go.Scatter(
        x=df['timestamp'],
        y=df['qpos_2'],
        mode='lines',
        name='Torso Height (z-axis)',
        line=dict(width=3)
    ))

    # Add other key joint positions for context if they exist
    # For example, a leg joint to show balancing motion
    if 'qpos_8' in df.columns: # Assuming qpos_8 is a knee or hip
        fig.add_trace(go.Scatter(
            x=df['timestamp'],
            y=df['qpos_8'],
            mode='lines',
            name='Right Knee Angle',
            line=dict(dash='dot')
        ))

    # Customize the layout
    fig.update_layout(
        title="Quark Motor Skills: Humanoid Stability Over Time",
        xaxis_title="Time (seconds)",
        yaxis_title="Joint Position / Angle",
        legend_title="Metrics",
        template="plotly_dark",
        height=600
    )

    # Save the plot to an HTML file
    output_path.parent.mkdir(parents=True, exist_ok=True)
    fig.write_html(str(output_path))
    print(f"✅ Interactive plot saved to: {output_path}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Plot motor skills from a simulation log.")
    parser.add_argument(
        "--log_path",
        type=str,
        default="data_knowledge/data_repository/metrics/motor_skills_log.csv",
        help="Path to the simulation log file."
    )
    parser.add_argument(
        "--output_path",
        type=str,
        default="testing/visualizations/motor_skills_plot.html",
        help="Path to save the output HTML plot."
    )
    args = parser.parse_args()

    plot_motor_skills(Path(args.log_path), Path(args.output_path))
