"""
Quark Autonomous Agent

This is the core execution agent for the Quark system. It is responsible for driving
development forward by autonomously executing tasks defined in the project roadmaps,
while ensuring all actions are compliant with the established biological and safety rules.
"""
import os
import subprocess
import sys

# Assuming the script is run from the project root.
# This allows for correct module imports from the custom paths.
sys.path.append(os.getcwd())

from quark_state_system.roadmap_controller import RoadmapController
from brain_modules.alphagenome_integration.compliance_engine import ComplianceEngine

class AutonomousAgent:
    """A self-determined agent that executes roadmap goals."""

    def __init__(self, workspace_root: str):
        """
        Initializes the Autonomous Agent.

        Args:
            workspace_root: The absolute path to the project's root directory.
        """
        self.workspace_root = workspace_root
        self.roadmap = RoadmapController(workspace_root)
        self.compliance = ComplianceEngine()
        print("âœ… Autonomous Agent Initialized. Ready to execute roadmap.")

    def execute_next_goal(self):
        """
        Fetches the next goal from the roadmap, validates it, and executes a
        placeholder action. This method is the main loop of the agent.
        """
        print("\n--- Starting New Goal Cycle ---")
        goal = self.roadmap.get_next_actionable_goal()

        if not goal:
            print("AGENT: No further goals to execute. System is up-to-date with roadmaps.")
            return

        print(f"AGENT: Preparing to execute goal: '{goal['task']}'")

        # In a real scenario, the agent would use an LLM to translate the
        # natural language goal into specific file modifications or commands.
        # Here, we simulate this with a placeholder action.
        action_plan = self._formulate_plan_for_goal(goal)
        
        print(f"AGENT: Formulated plan: '{action_plan['description']}'")
        
        # All actions must be validated for biological and safety compliance.
        is_compliant = self._validate_plan(action_plan)

        if is_compliant:
            print("AGENT: Plan is compliant. Executing...")
            self._execute_plan(action_plan)
            # Once execution is successful, report progress to the roadmap controller.
            self.roadmap.report_progress(goal)
            self.sync_quark_state()
        else:
            print("AGENT: Plan is NOT compliant. Aborting goal and moving to next.")
            # Mark the goal as "skipped" or "failed" in a real system.
            # For now, we just report it as if it were done to not get stuck.
            self.roadmap.report_progress(goal)


    def _formulate_plan_for_goal(self, goal: dict) -> dict:
        """
        Translates a high-level goal into a concrete, executable plan.
        Placeholder for now. This would be a call to a powerful LLM.
        """
        # Example of a mock plan
        plan = {
            "description": f"Create a new file to address the task: {goal['task']}",
            "type": "CREATE_FILE",
            "target_file": "tasks/generated_task_file.md",
            "content": f"# AUTOGENERATED FILE\n\nThis file addresses the roadmap goal:\n- {goal['task']}\n\nfrom roadmap: {goal['source_roadmap']}",
            "validation_checks": ["validate_action_legality:running_authorized_simulation"]
        }
        return plan

    def _validate_plan(self, plan: dict) -> bool:
        """
        Validates a plan against the ComplianceEngine.
        """
        for check in plan.get("validation_checks", []):
            validator_name, param = check.split(':', 1)
            validator = getattr(self.compliance, validator_name, None)
            if validator and not validator(param):
                return False
        return True

    def _execute_plan(self, plan: dict):
        """
        Executes a validated plan.
        """
        if plan['type'] == 'CREATE_FILE':
            target_path = os.path.join(self.workspace_root, plan['target_file'])
            try:
                with open(target_path, 'w') as f:
                    f.write(plan['content'])
                print(f"AGENT: Successfully created file at '{plan['target_file']}'")
            except Exception as e:
                print(f"AGENT: ERROR - Failed to create file: {e}")
        else:
            print(f"AGENT: WARNING - Plan type '{plan['type']}' is not yet implemented.")

    def sync_quark_state(self):
        """
        Calls the main sync script to ensure the entire system state is consistent.
        """
        print("AGENT: Syncing Quark State System...")
        try:
            subprocess.run([sys.executable, "QUARK_STATE_SYSTEM.py", "sync"], 
                           check=True, capture_output=True, text=True)
            print("AGENT: Quark State synced successfully.")
        except subprocess.CalledProcessError as e:
            print(f"AGENT: ERROR - Failed to sync Quark State: {e.stderr}")


if __name__ == '__main__':
    project_root = "/Users/camdouglas/quark"
    agent = AutonomousAgent(project_root)
    agent.execute_next_goal()
