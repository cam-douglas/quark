# Copyright (c) Lawrence Livermore National Security, LLC and other VisIt
# Project developers.  See the top-level LICENSE file for dates and other
# details.  No copyright assignment is required to contribute to VisIt.

###############################################################################
# VisIt Azure CI Checks
###############################################################################
# Azure Commands Ref:
# https://aka.ms/yaml

#####
# TO USE A NEW CONTAINER, UPDATE TAG NAME HERE AS PART OF YOUR PR!
# Be sure to keep the list of files in python_test_files variable
# consistent with those same files listed in the paths trigger
#####
variables:
  container_tag: visitdav/visit-ci-develop:2025-07-14-shaf0cf7c
  python_test_files: >
    ../../src/test/tests/databases/silo.py
    ../../src/test/tests/databases/blueprint.py
    ../../src/test/tests/databases/blueprint_export.py
    ../../src/test/tests/hybrid/ddf.py
    ../../src/test/tests/unit/default_methods.py
    ../../src/test/tests/unit/convert2to3.py
    ../../src/test/tests/unit/atts_assign.py
    ../../src/test/tests/unit/test_value_simple.py
    ../../src/test/tests/unit/annotation_objects.py
    ../../src/test/tests/unit/protocol.py
    ../../src/test/tests/unit/utility.py
    ../../src/test/tests/expressions/ghost_zoneid_expr.py
    ../../src/test/tests/expressions/global_stats.py
    ../../src/test/tests/expressions/math_expr.py
    ../../src/test/tests/expressions/tensor_expr.py

# only build merge target pr to develop
trigger: none
pr:
  branches:
    include:
    - develop
    - '[0-9].[0-9]RC'
    - '[0-9].[0-9][0-9]RC'
  paths:
    include:
    - 'azure-pipelines.yml'
    - '**/CMakeLists.txt'
    - '**/*.cmake'
    - '**/*.in'
    - '**/*.C'
    - '**/*.h'
    - 'data/silo*'
    - 'data/blueprint*'
    - 'src/test/py_src/*.py'
    - 'src/test/tests/databases/silo.py'
    - 'src/test/tests/databases/blueprint.py'
    - 'src/test/tests/databases/blueprint_export.py'
    - 'src/test/tests/hybrid/ddf.py'
    - 'src/test/tests/unit/default_methods.py'
    - 'src/test/tests/unit/convert2to3.py'
    - 'src/test/tests/unit/atts_assign.py'
    - 'src/test/tests/unit/test_value_simple.py'
    - 'src/test/tests/unit/annotation_objects.py'
    - 'src/test/tests/unit/protocol.py'
    - 'src/test/tests/unit/utility.py'
    - 'src/test/tests/expressions/ghost_zoneid_expr.py'
    - 'src/test/tests/expressions/global_stats.py'
    - 'src/test/tests/expressions/math_expr.py'
    - 'src/test/tests/expressions/tensor_expr.py'

# fast fail consistency checks
stages:
- stage: Consistency
  jobs:
  - job: BLT_Time_Travel_Check
    condition: ne(variables['System.PullRequest.IsDraft'], 'True')
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - checkout: self
        clean: boolean
        submodules: recursive

      - script: |
          #######################################
          # run our consistency check script
          #######################################
          git fetch
          python scripts/ci/check_blt_time_travel.py
        displayName: 'BLT Time Travel Check'


# main checks build using docker containers that
# include tpls built with build_visit
- stage: Main
  jobs:
  - job: Main_Build
    condition: ne(variables['System.PullRequest.IsDraft'], 'True')
    pool:
      vmImage: 'ubuntu-latest'
    timeoutInMinutes: 0
    container: ${{ variables.container_tag }}
    variables:
      TPLS_PATH: /masonry/build-mb-develop-ci-smoke/thirdparty_shared/third_party/
    steps:
      - checkout: self
        clean: boolean
        submodules: recursive

      - script: |
           #################################
           # configure
           #################################
           # setup path to cmake
           export CMAKE_BIN_DIR=`ls -d ${TPLS_PATH}/cmake/*/ci/bin/`
           export PATH=$PATH:$CMAKE_BIN_DIR
           # make dir for build
           mkdir build
           cd build
           # configure with cmake
           cmake -DVISIT_CONFIG_SITE:PATH="/visit-ci-cfg.cmake" ../src
        displayName: 'Configure with CMake'

      - script: |
           #################################
           # build
           #################################
           # build
           cd build
           make -j 4
        displayName: 'Build'

      - script: |
           #################################
           # fetch subset of test data (silo + blueprint)
           #################################
           cd data
           git lfs pull --include "**/silo*.tar.xz"
           git lfs pull --include "**/blueprint*.tar.xz"
           cd ../
           git lfs pull  --include test/baseline/databases/silo
           git lfs pull  --include test/baseline/databases/blueprint
           git lfs pull  --include test/baseline/databases/blueprint_export
           git lfs pull  --include test/baseline/hybrid/ddf
           cd build/testdata/
           for f in ../../data/silo*.tar.xz ../../data/blueprint*.tar.xz; do
             tar xvf "$f"
           done
        displayName: 'Prep Test Data'

      - script: |
           #################################
           # run tests
           #################################
           # run test suite
           cd build/test
           # find qt, vtk, and ospray
           export QT_LIB_DIR=`ls -d ${TPLS_PATH}/qt/*/ci/lib/`
           export VTK_LIB_DIR=`ls -d ${TPLS_PATH}/vtk/*/ci/lib/`
           export OSPRAY_LIB_DIR=`ls -d ${TPLS_PATH}/ospray/*/ci/ospray/lib/`
           # add to ld_lib path (rpaths are missing?)
           export LD_LIBRARY_PATH=${VTK_LIB_DIR}:${OSPRAY_LIB_DIR}:${QT_LIB_DIR}
           # run test suite on silo + blueprint tests
           export TESTS="$(python_test_files)"
           ./run_visit_test_suite.sh --fuzzy --pixdiff 10 --avgdiff 10 --numdiff 0.1 -v ${TESTS}
           hasFailed="$(grep Failed\\\|Unacceptable\\\|OS-Killed output/html/index.html)"
           if [[ -n "$hasFailed" ]]; then
             exit 1 # tests failed
           else
             exit 0 # tests passed
           fi
        displayName: 'Run Tests'

      - task: CopyFiles@2
        inputs:
          contents: 'build/test/output/html/**'
          targetFolder: $(Build.ArtifactStagingDirectory)
        condition: succeededOrFailed()

      - script: |
           #################################
           # make docs
           #################################
           # make docs
           cd build
           make docs
        displayName: 'Docs'

      - task: CopyFiles@2
        inputs:
          contents: 'build/resources/help/en_US/manual/**'
          targetFolder: $(Build.ArtifactStagingDirectory)
        condition: succeededOrFailed()

      - task: PublishBuildArtifacts@1
        inputs:
          pathToPublish: $(Build.ArtifactStagingDirectory)
          artifactName: VisIt_Test_Outputs
        condition: succeededOrFailed()

      # - script: |
      #      #################################
      #      # install
      #      #################################
      #      cd build
      #      make install
      #   displayName: 'Install'
